<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/1201/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/ ..\FrameXML\UI.xsd">

    <Button name="WGLCheckBoxTemplate" virtual="true">
        <Size x="12.0" y="12.0"/>
        <HitRectInsets>
            <AbsInset left="-4" right="-112" top="-4" bottom="-4"/>
        </HitRectInsets>
        <Layers>
            <Layer level="BACKGROUND" textureSubLevel="2">
                <Texture file="Interface\AddOns\WhoGotLoots\Art\checkbox" Alpha="1" parentKey="NormalBorder" snapToPixelGrid="false" texelSnappingBias="0.0">
                    <Size x="12.0" y="12.0"/>
                    <Anchors>
                        <Anchor point="TOPLEFT"/>
                    </Anchors>
                </Texture>
            </Layer>
            <Layer level="BORDER">
                <Texture file="Interface\AddOns\WhoGotLoots\Art\checkbox_hover" Alpha="1" parentKey="Highlight" snapToPixelGrid="false" texelSnappingBias="0.0">
                    <Size x="12.0" y="12.0"/>
                    <Anchors>
                        <Anchor point="TOPLEFT"/>
                    </Anchors>
                </Texture>
            </Layer>
            <Layer level="OVERLAY" textureSubLevel="4">
                <FontString inherits="WGLFont_Checkbox" justifyH="LEFT" justifyV="MIDDLE" parentKey="Label">
                    <Size x="0" y="12.0"/>
                    <Anchors>
                        <Anchor point="LEFT" relativeKey="$parent.NormalBorder" relativePoint="RIGHT" x="4" y="0"/>
                    </Anchors>
                </FontString>
                <Texture file="Interface\AddOns\WhoGotLoots\Art\checkbox_check" parentKey="Tick" hidden="true">
                    <Size x="12.0" y="12.0"/>
                    <Anchors>
                        <Anchor point="TOPLEFT"/>
                    </Anchors>
                </Texture>
            </Layer>
        </Layers>
        <Scripts>
            <OnLoad>
                self.Checked = false
                self.r, self.g, self.b, self.a = self.Label:GetTextColor()
                function self:SetChecked(checked)
                    self.Checked = checked
                    if checked then
                        self.Tick:Show()
                        PlaySound(856)
                    else
                        self.Tick:Hide()
                        PlaySound(857)
                    end
                end
                function self:GetChecked()
                    return self.Checked
                end
                function self:SetText(text)
                    self.Label:SetText(text)
                end
            </OnLoad>
            <OnClick>
                self:SetChecked(not self.Checked)
            </OnClick>
            <OnEnter>
                self.Label:SetTextColor(1, 1, 1)
                self.Highlight:Show()
            </OnEnter>
            <OnLeave>
                self.Label:SetTextColor(self.r, self.g, self.b, self.a)
                self.Highlight:Hide()
            </OnLeave>
        </Scripts>
    </Button>

    <Button name="WGLCloseBtn" virtual="true">
        <Size x="24" y="24"/>
        <Anchors>
            <Anchor point="CENTER" relativePoint="CENTER" y="0"/>
        </Anchors>
        <Layers>
            <Layer level="BACKGROUND" textureSubLevel="4">
				<Texture file="Interface\AddOns\WhoGotLoots\Art\CloseBtn" parentKey="Btn" hidden="false">
                    <Color r="0.7" g="0.7" b="0.7" a="1"/>
					<Anchors>
						<Anchor point="TOPLEFT" x="0" y="0"/>
						<Anchor point="BOTTOMRIGHT" x="0" y="0"/>
					</Anchors>
				</Texture>
			</Layer>
        </Layers>
        <Scripts>
            <OnEnter>
                self.Btn:SetVertexColor(1, 1, 1, 1);
            </OnEnter>
            <OnLeave>
                self.Btn:SetVertexColor(0.7, 0.7, 0.7, 1);
            </OnLeave>
        </Scripts>
    </Button>

    <Button name="WGLGeneralButton" virtual="true">
        <Size x="70" y="15"/>
        <Anchors>
            <Anchor point="CENTER" relativePoint="CENTER" y="0"/>
        </Anchors>
        <Layers>
            <Layer level="TEXT">
                <FontString parentKey="Text" inherits="WGLFont_Checkbox" text="Button" justifyH="CENTER" justifyV="MIDDLE">
                    <Size x="0" y="0"/>
                    <Anchors>
                        <Anchor point="CENTER" relativePoint="CENTER"/>
                    </Anchors>
                </FontString>
            </Layer>
        </Layers>
        <Scripts>
            <OnLoad>
                self.Enabled = true
                WGLUIBuilder.DrawSlicedBG(self, "BtnBG", "border", -2)
                WGLUIBuilder.ColorBGSlicedFrame(self, "border", 0.1, 0.1, 0.1, 1)
                WGLUIBuilder.DrawSlicedBG(self, "BtnBorder", "backdrop", -2)
                WGLUIBuilder.ColorBGSlicedFrame(self, "backdrop", 0.3, 0.3, 0.3, 1)

                function self:SetText(text)
                    self.Text:SetText(text)
                end

                function self:SetEnabled(enabled)
                    self.Enabled = enabled
                    if enabled then
                        WGLUIBuilder.ColorBGSlicedFrame(self, "backdrop", 0.3, 0.3, 0.3, 1)
                        WGLUIBuilder.ColorBGSlicedFrame(self, "border", 0.1, 0.1, 0.1, 1)
                        self.Text:SetTextColor(0.75, 0.75, 0.75)
                    else
                        WGLUIBuilder.ColorBGSlicedFrame(self, "backdrop", 0.2, 0.2, 0.2, 1)
                        WGLUIBuilder.ColorBGSlicedFrame(self, "border", 0.3, 0.3, 0.3, 1)
                        self.Text:SetTextColor(0.28, 0.28, 0.28)
                    end
                end

                function self:IsEnabled()
                    return self.Enabled
                end
            </OnLoad>
            <OnEnter>
                if self.Enabled == true then
                    WGLUIBuilder.ColorBGSlicedFrame(self, "backdrop", 0.4, 0.4, 0.4, 1)
                    WGLUIBuilder.ColorBGSlicedFrame(self, "border", 0.2, 0.2, 0.2, 1)
                end
            </OnEnter>
            <OnLeave>
                if self.Enabled == true then
                    WGLUIBuilder.ColorBGSlicedFrame(self, "backdrop", 0.3, 0.3, 0.3, 1)
                    WGLUIBuilder.ColorBGSlicedFrame(self, "border", 0.1, 0.1, 0.1, 1)
                end
            </OnLeave>
        </Scripts>
    </Button>

    <Button name="WGLInfoBtn" virtual="true">
        <Size x="24" y="24"/>
        <Anchors>
            <Anchor point="CENTER" relativePoint="CENTER" y="0"/>
        </Anchors>
        <Layers>
            <Layer level="BACKGROUND" textureSubLevel="4">
				<Texture file="Interface\AddOns\WhoGotLoots\Art\InfoButton" parentKey="Btn" hidden="false">
                    <Color r="0.7" g="0.7" b="0.7" a="1"/>
					<Anchors>
						<Anchor point="TOPLEFT" x="0" y="0"/>
						<Anchor point="BOTTOMRIGHT" x="0" y="0"/>
					</Anchors>
				</Texture>
			</Layer>
        </Layers>
        <Scripts>
            <OnEnter>
                self.Btn:SetVertexColor(1, 1, 1, 1);
            </OnEnter>
            <OnLeave>
                self.Btn:SetVertexColor(0.7, 0.7, 0.7, 1);
            </OnLeave>
        </Scripts>
    </Button>

    <Frame name="LoadingIcon" virtual="true">
        <Size x="32" y="32"/>
        <Anchors>
            <Anchor point="CENTER" relativePoint="CENTER" y="0"/>
        </Anchors>
        <Layers>
            <Layer level="BACKGROUND" textureSubLevel="4">
				<Texture file="Interface\AddOns\WhoGotLoots\Art\LoadingIcon" parentKey="Icon" hidden="false">
                    <Color r="1" g="1" b="1" a="0.8"/>
					<Anchors>
						<Anchor point="TOPLEFT" x="0" y="0"/>
						<Anchor point="BOTTOMRIGHT" x="0" y="0"/>
					</Anchors>
				</Texture>
			</Layer>
        </Layers>
        <Color r="1" g="1" b="1" a="0.7"/>
        <Scripts>
            <OnLoad>
                self.rotationAngle = 0
            </OnLoad>
            <OnShow>
                if not self:GetScript("OnUpdate") then
                    self:SetScript("OnUpdate", function(self, elapsed)
                        self.rotationAngle = self.rotationAngle + elapsed * 3 * -math.pi
                        self.Icon:SetRotation(self.rotationAngle)
                    end)
                end
            </OnShow>
            <OnHide>
                self:SetScript("OnUpdate", nil)
            </OnHide>
        </Scripts>
    </Frame>

    <Button name="WGLOptionsBtn" virtual="true">
        <Size x="24" y="24"/>
        <Anchors>
            <Anchor point="CENTER" relativePoint="CENTER" y="0"/>
        </Anchors>
        <Layers>
            <Layer level="BACKGROUND" textureSubLevel="4">
				<Texture file="Interface\AddOns\WhoGotLoots\Art\OptionsGear" parentKey="Btn" hidden="false">
                    <Color r="1" g="1" b="1" a="0.8"/>
					<Anchors>
						<Anchor point="TOPLEFT" x="0" y="0"/>
						<Anchor point="BOTTOMRIGHT" x="0" y="0"/>
					</Anchors>
				</Texture>
			</Layer>
        </Layers>
        <Scripts>
            <OnLoad>
                -- Initialize rotation variables
                self.rotationAngle = 0
                self.rampDelta = 0
                self.MouseOver = false
            </OnLoad>
            <OnClick>
                WhoGotLoots:ToggleOptions();
            </OnClick>
            <OnEnter>
				self.MouseOver = true
				self.Btn:SetVertexColor(1, 1, 1, 1);

				-- Create an update loop that begins spinning the gear
                -- Check if we've already set up the OnUpdate script
                if not self:GetScript("OnUpdate") then
                    self:SetScript("OnUpdate", function(self, elapsed)

                        -- If the mouse is over the button, increase the rotation speed
                        if self.MouseOver then
                            self.rampDelta = math.min(self.rampDelta + elapsed * 2, 0.5)
                        else
                            self.rampDelta = math.max(self.rampDelta - elapsed * 2, 0)
                        end

                        -- Update the rotation angle
                        self.rotationAngle = self.rotationAngle + elapsed * 3 * -math.pi * self.rampDelta

                        -- Update the texture rotation
                        self.Btn:SetRotation(self.rotationAngle)

                    end)
                end
            </OnEnter>
            <OnLeave>
                self.MouseOver = false
                self.Btn:SetVertexColor(1, 1, 1, 0.8);
            </OnLeave>
        </Scripts>
    </Button>

    <Slider name="WGLSlider" orientation="HORIZONTAL" enableMouse="true" virtual="true">
		<Size x="160" y="2"/>
		<HitRectInsets>
			<AbsInset left="-4" right="-4" top="-8" bottom="-8"/>
		</HitRectInsets>
		<ThumbTexture parentKey="Thumb" setAllPoints="true" rotation="0">
			<Size x="12" y="12"/>
            <Color r="0" g="0" b="0" a="0.0"/>
		</ThumbTexture>
		<Frames>
	
		</Frames>
		<Layers>
			<Layer level="BACKGROUND" textureSubLevel="1">
				<Texture setAllPoints="true" snapToPixelGrid="false" hidden="false">
					<Color r="0.3" g="0.3" b="0.3" a="1"/>
				</Texture>
			</Layer>
			<Layer level="BACKGROUND" textureSubLevel="2">
				<Texture setAllPoints="true" parentKey="Border" snapToPixelGrid="false" hidden="false">
					<Color r="0.1" g="0.1" b="0.1" a="1"/>
					<Anchors>
						<Anchor point="TOPLEFT" relativePoint="TOPLEFT" x="1" y="-1"/>
						<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT" x="-1" y="1"/>
					</Anchors>
				</Texture>
			</Layer>
			<Layer level="OVERLAY" textureSubLevel="4">
				<Texture parentKey="VirtualThumb" setAllPoints="true" file="Interface\AddOns\WhoGotLoots\Art\SliderThumb2">
					<Size x="20" y="20"/>
					<TexCoords left="0" right="1" top="0" bottom="1"/>
					<Anchors>
						<Anchor point="CENTER" relativeKey="$parent.Thumb" relativePoint="CENTER"/>
					</Anchors>
                    <Color r="0.75" g="0.75" b="0.75" a="1.0"/>
				</Texture>
			</Layer>
			<Layer level="OVERLAY">
				<FontString parentKey="KeyLabel" inherits="WGLFont_General" text="0" hidden="false" ignoreParentScale="false" justifyH="CENTER" justifyV="TOP">
					<Anchors>
						<Anchor point="TOP" relativeKey="$parent.VirtualThumb" relativePoint="BOTTOM" x="0" y="-4"/>
					</Anchors>
				</FontString>
				<FontString parentKey="KeyLabel2" inherits="WGLFont_General" text="0" hidden="true" ignoreParentScale="false" justifyH="LEFT" justifyV="MIDDLE">
					<Anchors>
						<Anchor point="LEFT" relativeKey="$parent" relativePoint="RIGHT" x="6" y="0"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Scripts>
            <OnValueChanged>
                local value = self:GetValue()
                local roundedValue = math.floor(value * 10 + 0.5) / 10
                self.KeyLabel:SetText(roundedValue)

                -- Now we need to position the thumb texture
                local min, max = self:GetMinMaxValues()
                local range = max - min
                local thumbPos = (value - min) / range
                self.VirtualThumb:SetPoint("CENTER", self, "LEFT", thumbPos * self:GetWidth(), 0)
            </OnValueChanged>
			<OnEnter>
				self.VirtualThumb:SetVertexColor(1, 1, 1, 1);
			</OnEnter>
			<OnLeave>
				self.VirtualThumb:SetVertexColor(0.75, 0.75, 0.75, 1);
			</OnLeave>
		</Scripts>
	</Slider>


</Ui>